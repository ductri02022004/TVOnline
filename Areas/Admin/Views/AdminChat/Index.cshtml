@{
    ViewData["Title"] = "Quản lý tin nhắn";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid py-4">
    <div class="messenger-container">
        <!-- Sidebar người dùng -->
        <div class="messenger-sidebar">
            <div class="messenger-header">
                <h5 class="mb-0">Tin nhắn quản trị</h5>
                <div class="messenger-actions">
                    <button class="btn btn-icon" id="refresh-users" title="Làm mới danh sách">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
            <div class="messenger-search">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fas fa-search text-muted"></i>
                    </span>
                    <input type="text" class="form-control ps-0 border-start-0" id="search-users" placeholder="Tìm kiếm người dùng...">
                </div>
            </div>
            <div class="users-stats px-3 py-2">
                <small class="text-muted">
                    <span id="total-users-count">0</span> người dùng
                </small>
            </div>
            <div class="messenger-user-list" id="users-list">
                <div class="text-center text-muted p-4 loading-state">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="mt-2">Đang tải danh sách người dùng...</p>
                </div>
            </div>
        </div>

        <!-- Phần nội dung tin nhắn -->
        <div class="messenger-content">
            <!-- Phần header tin nhắn -->
            <div class="messenger-content-header">
                <div class="d-flex align-items-center">
                    <div class="user-avatar bg-gradient-primary">
                        <i class="fas fa-user text-white"></i>
                    </div>
                    <div class="ms-3">
                        <h6 class="mb-0" id="chat-user-name">Chọn người dùng để bắt đầu cuộc trò chuyện</h6>
                        <small class="text-muted" id="user-status-text">Chưa có cuộc hội thoại nào</small>
                    </div>
                </div>
                <div class="messenger-header-actions">
                    <button class="btn btn-sm btn-outline-primary rounded-pill me-2" id="mark-all-read" title="Đánh dấu tất cả là đã đọc">
                        <i class="fas fa-check-double me-1"></i>Đánh dấu đã đọc
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-icon" id="user-options-btn" data-bs-toggle="dropdown" aria-expanded="false" title="Tùy chọn người dùng">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="user-options-btn">
                            <li><a class="dropdown-item" href="#" id="view-profile-link"><i class="fas fa-user me-2"></i>Xem hồ sơ người dùng</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" id="mark-all-read-info"><i class="fas fa-check-double me-2"></i>Đánh dấu đã đọc</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Phần nội dung tin nhắn chính -->
            <div class="messenger-content-body">
                <div class="chat-container" id="chat-messages">
                    <div class="text-center empty-chat-state">
                        <div class="empty-chat-icon">
                            <i class="fas fa-comments fa-3x mb-3 text-primary opacity-5"></i>
                        </div>
                        <h6 class="text-muted">Chọn người dùng từ danh sách để xem cuộc trò chuyện</h6>
                        <p class="text-sm opacity-8">Tin nhắn sẽ hiển thị tại đây</p>
                    </div>
                </div>
            </div>

            <!-- Phần footer và input tin nhắn -->
            <div class="messenger-content-footer">
                <form id="message-form" class="message-form">
                    <!-- File preview area -->
                    <div id="file-preview-container" class="mb-2"></div>
                    
                    <!-- Input area with buttons -->
                    <div class="input-with-buttons">
                        <button type="button" class="btn btn-light btn-sm" id="emoji-button" title="Chọn biểu tượng cảm xúc">
                            <i class="far fa-smile"></i>
                        </button>
                        <button type="button" class="btn btn-light btn-sm" id="attachment-button" title="Đính kèm tệp">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <input type="file" id="file-input" style="display:none" accept="image/*,.pdf,.doc,.docx,.xls,.xlsx,.txt">
                        
                        <textarea id="chat-input" class="form-control" placeholder="Nhập tin nhắn..." disabled></textarea>
                        
                        <button type="submit" id="send-button" class="btn btn-primary btn-sm" disabled title="Gửi tin nhắn">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    </form>
            </div>
        </div>
    </div>
</div>

<div id="admin-chat" class="d-none" data-admin-id="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value"></div>

@section Styles {
    <link rel="stylesheet" href="~/css/admin-chat.css" />
    <link rel="stylesheet" href="~/lib/toastr/toastr.min.css" />
}

@section Scripts {
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script src="~/lib/toastr/toastr.min.js"></script>
    <script src="~/js/admin-chat.js"></script>
    <div id="emojiPicker" class="emoji-picker" style="display:none;"></div>
    <script>
        // Set up global variables to avoid "not defined" errors
        window.chatHistoryRetryCount = 0;
        window.MAX_RETRIES = 3;
        
        // Add a function to patch the message objects to always have isEdited property
        function ensureMessageProperties(messages) {
            if (!messages) return messages;
            
            return messages.map(message => {
                // Ensure isEdited property exists to prevent errors
                if (message.isEdited === undefined) {
                    message.isEdited = false;
                }
                return message;
            });
        }
        
        // Wait for document ready to ensure admin-chat.js is loaded
        $(document).ready(function() {
            // Make sure the original loadChatHistory function exists
            if (typeof loadChatHistory === 'undefined') {
                // Define a temporary function until the real one is loaded
                window.loadChatHistory = function(adminId, otherUserId, isRetry) {
                    console.log("Using temporary loadChatHistory function", adminId, otherUserId, isRetry);
                    $("#chat-messages").html(`
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2">Đang tải tin nhắn...</p>
                                </div>
                            `);
                    
                    // Try to load the real function
                    setTimeout(() => {
                        if (typeof originalLoadChatHistory !== 'undefined') {
                            originalLoadChatHistory(adminId, otherUserId, isRetry);
                        } else {
                            $.ajax({
                                url: `/Admin/AdminChat/GetChatHistory?userId=${adminId}&otherUserId=${otherUserId}`,
                                type: "GET",
                                success: function(messages) {
                        $("#chat-messages").empty();
                        
                                    if (!messages || messages.length === 0) {
                            $("#chat-messages").html(`
                                            <div class="text-center empty-chat-state">
                                                <div class="empty-chat-icon">
                                                    <i class="fas fa-comments fa-3x mb-3 text-primary opacity-5"></i>
                                                </div>
                                                <h6 class="text-muted">Chưa có tin nhắn nào</h6>
                                                <p class="text-sm opacity-8">Bắt đầu cuộc trò chuyện ngay bây giờ!</p>
                                </div>
                            `);
                            return;
                        }
                        
                                    // Patch the messages to ensure isEdited property exists
                                    messages = ensureMessageProperties(messages);
                                    
                                    if (typeof appendMessage === 'function') {
                                        messages.forEach(function(message) {
                                            appendMessage(message);
                        });
                        
                        // Scroll to bottom
                                        if (typeof scrollToBottom === 'function') {
                        scrollToBottom();
                                        } else {
                                            const chatContainer = document.getElementById("chat-messages");
                                            chatContainer.scrollTop = chatContainer.scrollHeight;
                                        }
                                    } else {
                                        $("#chat-messages").html(`
                                            <div class="alert alert-warning">
                                                <p>Không thể hiển thị tin nhắn. Vui lòng tải lại trang.</p>
                                            </div>
                                        `);
                                    }
                                },
                                error: function(xhr) {
                                    let errorMessage = "Không thể tải lịch sử trò chuyện";
                                    try {
                                        if (xhr.responseJSON && xhr.responseJSON.message) {
                                            errorMessage = xhr.responseJSON.message;
                                        }
                                    } catch (e) {}
                                    
                                    $("#chat-messages").html(`
                                        <div class="alert alert-danger m-3">
                                            <h6><i class="fas fa-exclamation-triangle me-2"></i>Lỗi</h6>
                                            <p>${errorMessage}</p>
                                            <div class="mt-3">
                                                <button class="btn btn-sm btn-outline-danger" onclick="loadChatHistory('${adminId}', '${otherUserId}')">
                                                    <i class="fas fa-sync-alt me-1"></i>Thử lại
                                                </button>
                                            </div>
                                        </div>
                                    `);
                    }
                });
            }
                    }, 500);
                };
            }
            
            // Make sure scrollToBottom is available globally
            if (typeof scrollToBottom === 'undefined') {
                window.scrollToBottom = function() {
                    const chatContainer = document.getElementById("chat-messages");
                    if (chatContainer) {
                        chatContainer.scrollTop = chatContainer.scrollHeight;
                    }
                };
            }
            
            // Make sure appendMessage is available globally
            if (typeof appendMessage === 'undefined') {
                window.appendMessage = function(message) {
                    console.log("Using temporary appendMessage function", message);
                };
            }
        });
        
        // Script to facilitate debugging errors
        window.addEventListener('error', function(e) {
            console.error('Global error caught:', e.message, e.filename, e.lineno, e.colno, e.error);
            if (document.getElementById('error-log') === null) {
                const errorLog = document.createElement('div');
                errorLog.id = 'error-log';
                errorLog.style.cssText = 'position:fixed; bottom:10px; right:10px; background:rgba(255,255,255,0.9); border:1px solid #dc3545; border-radius:5px; padding:10px; z-index:9999; max-width:350px; max-height:200px; overflow:auto; font-size:12px;';
                errorLog.innerHTML = '<strong>Error Log</strong> <button onclick="this.parentNode.remove()" style="float:right;background:none;border:none;cursor:pointer;">&times;</button><hr style="margin:5px 0">';
                document.body.appendChild(errorLog);
            }
            
            const errorEntry = document.createElement('div');
            errorEntry.innerHTML = `<strong>${new Date().toLocaleTimeString()}</strong>: ${e.message}`;
            document.getElementById('error-log').appendChild(errorEntry);
        });
        
        // Add AJAX error handler
        $(document).ajaxError(function(event, jqXHR, settings, error) {
            console.error('AJAX error:', settings.url, jqXHR.status, error);
            const errorMsg = `AJAX Error: ${settings.url} (${jqXHR.status})`;
            if (document.getElementById('error-log')) {
                const errorEntry = document.createElement('div');
                errorEntry.innerHTML = `<strong>${new Date().toLocaleTimeString()}</strong>: ${errorMsg}`;
                document.getElementById('error-log').appendChild(errorEntry);
            }
        });
    </script>
}