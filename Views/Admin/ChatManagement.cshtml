@{
    ViewData["Title"] = "Quản lý Chat";
    Layout = "_AdminLayout";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12 col-lg-4 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-people-fill me-2"></i>Danh sách cuộc trò chuyện</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group chat-user-list" id="userChatList">
                        <!-- Danh sách người dùng sẽ được thêm ở đây -->
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2">Đang tải danh sách...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-lg-8">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0" id="chatUserName">Chọn một cuộc trò chuyện</h5>
                    <span class="badge bg-primary d-none" id="userStatus">Trực tuyến</span>
                </div>
                <div class="card-body chat-messages-container">
                    <div id="chatMessages" class="chat-messages">
                        <!-- Tin nhắn sẽ hiển thị ở đây -->
                        <div class="text-center p-5">
                            <i class="bi bi-chat-square-text text-muted display-1"></i>
                            <p class="mt-3">Chọn một cuộc trò chuyện từ danh sách bên trái để bắt đầu</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-white">
                    <form id="adminChatForm" class="d-flex gap-2">
                        <input type="text" class="form-control" id="adminMessageInput" placeholder="Nhập tin nhắn..." disabled>
                        <button type="submit" class="btn btn-primary" disabled>
                            <i class="bi bi-send-fill"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section styles {
    <style>
        .chat-user-list {
            max-height: 600px;
            overflow-y: auto;
        }
        
        .chat-user-item {
            border-left: 3px solid transparent;
            transition: all 0.2s ease;
        }
        
        .chat-user-item.active {
            border-left-color: var(--primary-color);
            background-color: rgba(13, 110, 253, 0.05);
        }
        
        .chat-user-item:hover:not(.active) {
            background-color: rgba(0, 0, 0, 0.03);
        }
        
        .chat-user-item .unread-badge {
            min-width: 20px;
            height: 20px;
            border-radius: 10px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-messages-container {
            height: 500px;
            padding: 1rem;
        }
        
        .chat-messages {
            height: 100%;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .chat-message {
            display: flex;
            flex-direction: column;
            max-width: 80%;
        }
        
        .chat-message.admin {
            align-self: flex-end;
            align-items: flex-end;
        }
        
        .chat-message.user {
            align-self: flex-start;
            align-items: flex-start;
        }
        
        .message-bubble {
            padding: 10px 15px;
            border-radius: 18px;
            margin-bottom: 5px;
        }
        
        .chat-message.admin .message-bubble {
            background-color: var(--primary-color);
            color: white;
            border-bottom-right-radius: 4px;
        }
        
        .chat-message.user .message-bubble {
            background-color: #f1f1f1;
            color: #333;
            border-bottom-left-radius: 4px;
        }
        
        .message-time {
            font-size: 12px;
            color: #999;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const userChatList = document.getElementById('userChatList');
            const chatMessages = document.getElementById('chatMessages');
            const chatUserName = document.getElementById('chatUserName');
            const userStatus = document.getElementById('userStatus');
            const adminChatForm = document.getElementById('adminChatForm');
            const adminMessageInput = document.getElementById('adminMessageInput');
            
            let connection = null;
            let selectedUserId = null;
            
            // Load danh sách người dùng
            function loadUsersList() {
                fetch('/api/chat/users-with-conversations')
                    .then(response => response.json())
                    .then(users => {
                        userChatList.innerHTML = '';
                        
                        if (users.length === 0) {
                            userChatList.innerHTML = `
                                <div class="text-center py-4">
                                    <i class="bi bi-chat-square-text text-muted fs-1"></i>
                                    <p class="mt-2">Chưa có cuộc trò chuyện nào</p>
                                </div>
                            `;
                            return;
                        }
                        
                        users.forEach(user => {
                            const userItem = document.createElement('a');
                            userItem.href = '#';
                            userItem.classList.add('list-group-item', 'list-group-item-action', 'chat-user-item', 'd-flex', 'justify-content-between', 'align-items-center', 'py-3');
                            userItem.dataset.userId = user.id;
                            
                            // Thêm thông tin người dùng
                            const userInfo = document.createElement('div');
                            userInfo.innerHTML = `
                                <h6 class="mb-1">${user.fullName || user.userName}</h6>
                                <small class="text-muted">${user.email}</small>
                            `;
                            
                            // Thêm badge thông báo chưa đọc nếu có
                            const unreadBadge = document.createElement('span');
                            unreadBadge.classList.add('badge', 'bg-danger', 'unread-badge', 'd-none');
                            unreadBadge.id = `unread-${user.id}`;
                            
                            userItem.appendChild(userInfo);
                            userItem.appendChild(unreadBadge);
                            
                            // Xử lý khi click vào người dùng
                            userItem.addEventListener('click', function(e) {
                                e.preventDefault();
                                
                                // Xóa active từ tất cả các user item
                                document.querySelectorAll('.chat-user-item').forEach(item => {
                                    item.classList.remove('active');
                                });
                                
                                // Thêm active cho user item được chọn
                                this.classList.add('active');
                                
                                // Cập nhật người dùng được chọn
                                selectedUserId = this.dataset.userId;
                                chatUserName.textContent = this.querySelector('h6').textContent;
                                
                                // Hiển thị trạng thái
                                userStatus.classList.remove('d-none');
                                
                                // Kích hoạt form chat
                                adminMessageInput.disabled = false;
                                adminChatForm.querySelector('button').disabled = false;
                                
                                // Ẩn badge thông báo
                                unreadBadge.classList.add('d-none');
                                unreadBadge.textContent = '';
                                
                                // Tải lịch sử chat
                                loadChatHistory(selectedUserId);
                                
                                // Đánh dấu tin nhắn đã đọc
                                markMessagesAsRead(selectedUserId);
                            });
                            
                            userChatList.appendChild(userItem);
                        });
                    })
                    .catch(error => {
                        console.error('Error loading users list:', error);
                        userChatList.innerHTML = `
                            <div class="text-center py-4">
                                <i class="bi bi-exclamation-triangle text-danger fs-1"></i>
                                <p class="mt-2">Lỗi khi tải danh sách</p>
                            </div>
                        `;
                    });
            }
            
            // Tải lịch sử chat
            function loadChatHistory(userId) {
                chatMessages.innerHTML = `
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <p class="mt-2">Đang tải tin nhắn...</p>
                    </div>
                `;
                
                fetch(`/api/chat/history/${userId}`)
                    .then(response => response.json())
                    .then(messages => {
                        chatMessages.innerHTML = '';
                        
                        if (messages.length === 0) {
                            chatMessages.innerHTML = `
                                <div class="text-center py-5">
                                    <i class="bi bi-chat-square-text text-muted fs-1"></i>
                                    <p class="mt-3">Chưa có tin nhắn nào</p>
                                </div>
                            `;
                            return;
                        }
                        
                        messages.forEach(msg => {
                            const isAdmin = msg.senderId === 'admin';
                            const messageElement = createMessageElement(msg.content, new Date(msg.timestamp), isAdmin);
                            chatMessages.appendChild(messageElement);
                        });
                        
                        // Cuộn xuống dưới
                        scrollToBottom();
                    })
                    .catch(error => {
                        console.error('Error loading chat history:', error);
                        chatMessages.innerHTML = `
                            <div class="text-center py-5">
                                <i class="bi bi-exclamation-triangle text-danger fs-1"></i>
                                <p class="mt-3">Lỗi khi tải tin nhắn</p>
                            </div>
                        `;
                    });
            }
            
            // Tạo phần tử tin nhắn
            function createMessageElement(content, timestamp, isAdmin) {
                const div = document.createElement('div');
                div.classList.add('chat-message', isAdmin ? 'admin' : 'user');
                
                const bubble = document.createElement('div');
                bubble.classList.add('message-bubble');
                bubble.textContent = content;
                
                const time = document.createElement('div');
                time.classList.add('message-time');
                time.textContent = formatTime(timestamp);
                
                div.appendChild(bubble);
                div.appendChild(time);
                
                return div;
            }
            
            // Format thời gian
            function formatTime(date) {
                return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            
            // Cuộn xuống dưới
            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Đánh dấu tin nhắn đã đọc
            function markMessagesAsRead(userId) {
                fetch('/api/chat/mark-as-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ senderId: userId })
                });
            }
            
            // Setup SignalR connection
            function setupSignalR() {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();
                    
                // Xử lý khi nhận tin nhắn
                connection.on("ReceiveMessage", function(message) {
                    // Nếu tin nhắn từ người dùng đang được chọn
                    if (selectedUserId === message.senderId) {
                        const messageElement = createMessageElement(
                            message.content,
                            new Date(message.timestamp),
                            message.isFromAdmin
                        );
                        chatMessages.appendChild(messageElement);
                        scrollToBottom();
                        
                        // Đánh dấu đã đọc
                        markMessagesAsRead(selectedUserId);
                    } 
                    // Nếu tin nhắn từ người dùng khác
                    else if (!message.isFromAdmin) {
                        // Hiển thị badge thông báo chưa đọc
                        const unreadBadge = document.getElementById(`unread-${message.senderId}`);
                        if (unreadBadge) {
                            unreadBadge.classList.remove('d-none');
                            const currentCount = parseInt(unreadBadge.textContent) || 0;
                            unreadBadge.textContent = currentCount + 1;
                        }
                    }
                });
                
                // Xử lý khi gửi tin nhắn thành công
                connection.on("MessageSent", function(message) {
                    console.log("Message sent successfully:", message);
                });
                
                // Xử lý lỗi
                connection.on("ErrorOccurred", function(errorMessage) {
                    console.error("Error from server:", errorMessage);
                    alert("Lỗi: " + errorMessage);
                });
                
                // Bắt đầu kết nối
                connection.start()
                    .then(function() {
                        console.log("Connected to SignalR hub");
                        loadUsersList();
                    })
                    .catch(function(err) {
                        console.error("Error connecting to SignalR hub:", err);
                        return console.error(err.toString());
                    });
            }
            
            // Form gửi tin nhắn
            adminChatForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const message = adminMessageInput.value.trim();
                if (message && selectedUserId) {
                    // Hiển thị tin nhắn ngay lập tức để UX tốt hơn
                    const messageElement = createMessageElement(message, new Date(), true);
                    chatMessages.appendChild(messageElement);
                    scrollToBottom();
                    
                    // Xóa input
                    adminMessageInput.value = '';
                    
                    // Gửi tin nhắn
                    connection.invoke("SendMessageToUser", selectedUserId, message)
                        .catch(function(err) {
                            console.error("Error sending message:", err);
                            alert("Không thể gửi tin nhắn. Vui lòng thử lại sau.");
                        });
                }
            });
            
            // Khởi tạo
            setupSignalR();
            
            // Làm mới danh sách người dùng mỗi 30 giây
            setInterval(loadUsersList, 30000);
        });
    </script>
} 